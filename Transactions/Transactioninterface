import java.util.Calendar;

public interface TransactionInterface {
    double getAmount();
    Calendar getDate();
    String getTransactionID();
    void printTransactionDetails();
    void apply(BankAccount bankAccount);
}
// Basetransaction
import java.util.Calendar;

public abstract class BaseTransaction implements TransactionInterface {
    private double amount;
    private Calendar date;
    private String transactionID;

    public BaseTransaction(double amount, Calendar date, String transactionID) {
        this.amount = amount;
        this.date = date;
        this.transactionID = transactionID;
    }

    @Override
    public double getAmount() {
        return amount;
    }

    @Override
    public Calendar getDate() {
        return date;
    }

    @Override
    public String getTransactionID() {
        return transactionID;
    }

    @Override
    public void printTransactionDetails() {
        System.out.println("Transaction ID: " + transactionID);
        System.out.println("Amount: " + amount);
        System.out.println("Date: " + date.getTime());
    }

    @Override
    public abstract void apply(BankAccount bankAccount);
}
//Deposittransaction
import java.util.Calendar;

public class DepositTransaction extends BaseTransaction {
    public DepositTransaction(double amount, Calendar date, String transactionID) {
        super(amount, date, transactionID);
    }

    @Override
    public void apply(BankAccount bankAccount) {
        bankAccount.deposit(getAmount());
        System.out.println("Deposit successful. New balance: " + bankAccount.getBalance());
    }
}
//Withdrawaltransaction
import java.util.Calendar;

public class WithdrawalTransaction extends BaseTransaction {
    public WithdrawalTransaction(double amount, Calendar date, String transactionID) {
        super(amount, date, transactionID);
    }

    @Override
    public void apply(BankAccount bankAccount) throws InsufficientFundsException {
        if (bankAccount.getBalance() >= getAmount()) {
            bankAccount.withdraw(getAmount());
            System.out.println("Withdrawal successful. New balance: " + bankAccount.getBalance());
        } else {
            throw new InsufficientFundsException("Insufficient funds for withdrawal!");
        }
    }

    public boolean reverse(BankAccount bankAccount) {
        bankAccount.deposit(getAmount());
        System.out.println("Withdrawal reversed. New balance: " + bankAccount.getBalance());
        return true;
    }
}
//InsufficientFundsException
public class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}
//BankAccount
public class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }
}
// Main
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000);

        // Deposit Transaction
        Calendar depositDate = Calendar.getInstance();
        DepositTransaction deposit = new DepositTransaction(500, depositDate, "D001");
        deposit.apply(account);
        deposit.printTransactionDetails();

        // Withdrawal Transaction
        Calendar withdrawalDate = Calendar.getInstance();
        WithdrawalTransaction withdrawal = new WithdrawalTransaction(700, withdrawalDate, "W001");
        try {
            withdrawal.apply(account);
        } catch (InsufficientFundsException e) {
            System.out.println(e.getMessage());
        }
        withdrawal.printTransactionDetails();

        // Attempt to reverse withdrawal
        withdrawal.reverse(account);

        // Testing insufficient funds
        WithdrawalTransaction insufficientWithdrawal = new WithdrawalTransaction(2000, withdrawalDate, "W002");
        try {
            insufficientWithdrawal.apply(account);
        } catch (InsufficientFundsException e) {
            System.out.println(e.getMessage());
        }
    }
}




